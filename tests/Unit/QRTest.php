<?php

namespace Tests\Unit;

use App\Models\Project;
use App\Models\Trap;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Spatie\Permission\Models\Role;
use Tests\TestCase;

class QRTest extends TestCase
{
    use RefreshDatabase;

    private User $adminUser;
    private User $regularUser;
    private Project $project;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        // Generate Admin Role
        if(! Role::where('name', 'admin')->exists()) {
            Role::create(['name' => User::ADMIN_ROLE]);
        }

        // Create a project
        $project = Project::factory()->create();

        // Create users to run tests with
        $adminUser = User::factory()->create();

        $adminUser->assignRole(User::ADMIN_ROLE);
        $adminUser->save();

        $regularUser = User::factory()->create();

        $this->adminUser = $adminUser;
        $this->regularUser = $regularUser;
        $this->project = $project;
    }

    /**
     * Ensure traps are created successfully by admin users
     *
     * @return void
     */
    public function test_create_trap_successful_for_admin() {
        $trapCountBefore = Trap::all()->count();

        $response = $this->actingAs($this->adminUser, 'sanctum')
            ->post(route('admin.qr.create'), [
                'number' => 1,
            ]);

        $trapCountAfter = Trap::all()->count();

        $response->assertStatus(200);
        self::assertEquals($trapCountBefore + 1, $trapCountAfter);
    }

    /**
     * Ensure traps are not created by non admins
     *
     * @return void
     */
    public function test_create_not_successful_for_non_admin() {
        $trapCountBefore = Trap::all()->count();

        $response = $this->actingAs($this->regularUser, 'sanctum')
            ->post(route('admin.qr.create'), [
                'number' => 1,
            ]);

        $trapCountAfter = Trap::all()->count();

        $response->assertStatus(403);
        self::assertEquals($trapCountBefore, $trapCountAfter);
    }

    /**
     * Ensure traps are created successfully by admin users for a specific project
     *
     * @return void
     */
    public function test_create_in_project_successful_for_admin() {
        $trapCountBefore = $this->project->traps()->count();

        $response = $this->actingAs($this->adminUser, 'sanctum')
            ->post(route('admin.qr.create.project', ['project' => $this->project->id]), [
                'number' => 1,
            ]);

        $trapCountAfter = $this->project->traps()->count();

        $response->assertStatus(200);
        self::assertEquals($trapCountBefore + 1, $trapCountAfter);
    }

    /**
     * Ensure traps are not created by non admins for a specific project
     *
     * @return void
     */
    public function test_create_in_project_not_successful_for_non_admin() {
        $trapCountBefore = $this->project->traps()->count();

        $response = $this->actingAs($this->regularUser, 'sanctum')
            ->post(route('admin.qr.create.project', ['project' => $this->project->id]), [
                'number' => 1,
            ]);

        $trapCountAfter = $this->project->traps()->count();

        $response->assertStatus(403);
        self::assertEquals($trapCountBefore, $trapCountAfter);
    }

    /**
     * Check if only unmapped and all unmapped traps are returned
     *
     * @return void
     */
    public function test_unmapped() {
        $unmappedCount = 10;
        $unmapped = Trap::factory()->count($unmappedCount)->unmapped()->create();

        $response = $this->actingAs($this->adminUser, 'sanctum')
            ->get(route('admin.qr.unmapped'));

        $response->assertStatus(200)
            ->assertJsonCount($unmappedCount);
    }

    /**
     * Check if only unmapped and all unmapped traps are returned
     * for a specific project
     */
    public function test_unmapped_in_project(){
        $unmappedCount = 10;
        $project = Project::factory()->create();
        $unmapped = Trap::factory()->count($unmappedCount)->unmappedInProject($project)->create();

        $response = $this->actingAs($this->adminUser, 'sanctum')
            ->get(route('admin.qr.unmapped.project', ['project' => $project->id]));

        $response->assertStatus(200)
            ->assertJsonCount($unmappedCount);

        $project->refresh();
        self::assertEquals($unmappedCount,
            $project->traps()->unmappedInProject()->count());
    }

    /**
     * Check the admin only mapping route.
     * If the NZ_ID is correctly assigned to the trap
     */
    public function test_map_qr_code_admin_is_successful_for_admin() {
        $trap = Trap::factory()->unmapped()->create();
        $oldNZIDVValue = $trap->nz_trap_id;

        $nzIdValue = '112233';

        $response = $this->actingAs($this->adminUser, 'sanctum')
            ->post(route('admin.qr.map'), [
                'qr_id' => $trap->qr_id,
                'nz_id' => $nzIdValue
            ]);

        $trap->refresh();
        $newNZIDValue = $trap->nz_trap_id;

        $response->assertStatus(200);
        self::assertNull($oldNZIDVValue);
        self::assertEquals($nzIdValue, $newNZIDValue);
    }

    /**
     * Check the admin only mapping route.
     * Ensure non admin users are not allowed the access the admin only endpoint
     *
     * @return void
     */
    public function test_map_qr_code_admin_is_not_successful_for_user() {
        $trap = Trap::factory()->unmapped()->create();
        $oldNZIDVValue = $trap->nz_trap_id;

        $nzIdValue = '112233';

        $response = $this->actingAs($this->regularUser, 'sanctum')
            ->post(route('admin.qr.map'), [
                'qr_id' => $trap->qr_id,
                'nz_id' => $nzIdValue
            ]);

        $trap->refresh();
        $newNZIDValue = $trap->nz_trap_id;

        $response->assertStatus(403);
        self::assertNull($oldNZIDVValue);
        self::assertNull($newNZIDValue);
    }

    /**
     * Ensure the general purpose mapping route does not allow non pcords to map traps
     *
     * @return void
     */
    public function test_map_qr_code_is_not_successful_for_user_that_is_not_a_pcord() {
        // Create an unmapped trap and pop it into a project
        $trap = Trap::factory()->unmapped()->create();
        $this->project->traps()->save($trap);
        $trap->refresh();
        $this->project->refresh();

        $oldNZIDVValue = $trap->nz_trap_id;

        $nzIdValue = '112233';

        $response = $this->actingAs($this->regularUser, 'sanctum')
            ->post(route('qr.map'), [
                'qr_id' => $trap->qr_id,
                'nz_id' => $nzIdValue
            ]);

        $trap->refresh();
        $newNZIDValue = $trap->nz_trap_id;

        $response->assertStatus(403);
        self::assertNull($oldNZIDVValue);
        self::assertNull($newNZIDValue);
    }

    /**
     * Check the general purpose mapping route maps correctly for project coordinators
     *
     * @return void
     */
    public function test_map_qr_code_is_successful_for_user_that_is_a_pcord() {
        // Create an unmapped trap and pop it into a project
        $trap = Trap::factory()->unmapped()->create();
        $this->project->traps()->save($trap);
        $trap->refresh();

        // Add the regular user to the project
        $this->regularUser->projects()->save($this->project);

        // Add this user a project coordinator of the project
        $this->regularUser->projects()->updateExistingPivot($this->project->id, [
            'coordinator' => true
        ]);
        $this->project->refresh();

        $oldNZIDVValue = $trap->nz_trap_id;

        $nzIdValue = '112233';

        $response = $this->actingAs($this->regularUser, 'sanctum')
            ->post(route('qr.map'), [
                'qr_id' => $trap->qr_id,
                'nz_id' => $nzIdValue
            ]);

        $trap->refresh();
        $newNZIDValue = $trap->nz_trap_id;
        

        $response->assertStatus(200);
        self::assertNull($oldNZIDVValue);
        self::assertEquals($nzIdValue, $newNZIDValue);
    }
}
